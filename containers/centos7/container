#!/bin/sh
#
# container management helper script
#

info() {
    echo "$*" >&2
}

error() {
    echo "ERROR: $*" >&2
}

usage() {
    echo "USAGE: container <image> start|stop|remove|status|logs|restart|reload|exec|run" >&2
}

_require_named_container() {
    if [ -z "$CONTAINER_NAME" ]
    then
        error "Container name is not configured."
        exit 1
    fi
}

_container_exists() {
    $CT_COMMAND container exists "$CONTAINER_NAME"
}

_container_runs() {
    [ -n "`$CT_COMMAND ps --format={{.ID}} --filter "name=^$CONTAINER_NAME$" --filter 'status=running'`" ]
}

_create() {
    info "Creating $CONTAINER_NAME container ..."
    $CT_COMMAND container create $CREATE_OPTIONS --name $CONTAINER_NAME $IMAGE > /dev/null
}

_start() {
    if _container_runs
    then
        info "Container $CONTAINER_NAME is already running."
        exit 0
    fi

    info "Starting $CONTAINER_NAME container ..."
    $CT_COMMAND container start "$CONTAINER_NAME"
}

_stop() {
    echo "Stopping $CONTAINER_NAME container ..." >&2
    $CT_COMMAND container stop "$CONTAINER_NAME" > /dev/null
}

_remove() {
    echo "Removing $CONTAINER_NAME container ..." >&2
    $CT_COMMAND container rm "$CONTAINER_NAME"
}

_status() {
    $CT_COMMAND ps --filter "name=^$CONTAINER_NAME$" -a "$@"
}

_exec() {
    case "$1" in
        -i) TI_OPTIONS="-i" ; shift ;;
        --) TI_OPTIONS="" ; shift ;;
        *) TI_OPTIONS="-ti" ;;
    esac

    if _container_runs
    then
        set -x
        exec $CT_COMMAND exec $TI_OPTIONS $EXEC_OPTIONS "$CONTAINER_NAME" "${@:-/bin/bash}"
    else
        echo "Container $CONTAINER_NAME is not running!"
        exit 1
    fi
}

_run() {
    exec $CT_COMMAND run $TI_OPTIONS --rm $RUN_OPTIONS $IMAGE "$@"
}

_show_logs() {
    $CT_COMMAND logs $@ "$CONTAINER_NAME"
}

# -----------------------------------------------------------------------------

if [ -z "$1" ]
then
    error "Missing mandatory image name!"
    usage
    exit 1
fi

DIR="$(cd "$(dirname $0)" ; pwd )"
. $DIR/common.sh
. $DIR/$1/common.sh
shift

if [ -z "$CONTAINER_NAME" ]
then
    error "Container name is not configured."
    exit 1
fi

COMMAND="$1"
[ "$#" -ge 1 ] && shift

case "$COMMAND" in
    status)
        _require_named_container
        _status "$@"
        ;;
    logs|show_logs)
        _require_named_container
        _show_logs "$@"
        ;;
    start)
        _require_named_container
        _container_exists || _create
        _start
        ;;
    stop)
        _require_named_container
        _container_exists && _container_runs && _stop
        ;;
    remove)
        _require_named_container
        _container_exists && {
            _container_runs && _stop
            _remove
        }
        ;;
    restart)
        _require_named_container
        _container_exists || {
            info "Container $CONTAINER_NAME does not exist!"
            exit 0
        }
        _container_runs && _stop
        _start
        ;;
    reload)
        _require_named_container
        _container_exists && {
            _container_runs && _stop
            _remove
        }
        _create
        _start
        ;;
    exec)
        _require_named_container
        _container_exists || {
            info "Container $CONTAINER_NAME does not exist!"
            exit 0
        }
        _exec "$@"
        ;;
    run)
        _run "$@"
        ;;
    *)
        if [ -z "$COMMAND" ]
        then
            error "Missing pod command!"
        else
            error "$COMMAND not found!"
        fi
        usage
        exit 1
        ;;
esac
