#!/bin/sh
#-------------------------------------------------------------------------------
#
# Purpose: EOxServer instance configuration
# Author(s): Martin Paces <martin.paces@eox.at>
#-------------------------------------------------------------------------------
# Copyright (C) 2015 EOX IT Services GmbH

. `dirname $0`/../lib_logging.sh
. `dirname $0`/../lib_apache.sh
. `dirname $0`/../lib_python_venv.sh
. `dirname $0`/../lib_eoxserver.sh

info "Configuring EOxServer instance ... "

activate_venv "$EOXS_VENV_ROOT"

SECRET_KEY="`python -c 'from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())'`"

VIRES_PERMISSION=${VIRES_PERMISSION:-swarm}

# Configuration switches - all default to YES
CONFIGURE_VIRES=${CONFIGURE_VIRES:-YES}
CONFIGURE_ALLAUTH=${CONFIGURE_ALLAUTH:-YES}
CONFIGURE_WPSASYNC=${CONFIGURE_WPSASYNC:-YES}

required_variables SECRET_KEY
required_variables VIRES_SERVER_HOME
required_variables VIRES_SERVER_HOST VIRES_SERVICE_NAME
required_variables VIRES_SERVER_NPROC VIRES_SERVER_NTHREAD
required_variables VIRES_USER VIRES_GROUP VIRES_INSTALL_USER VIRES_INSTALL_GROUP
required_variables VIRES_LOGDIR VIRES_TMPDIR VIRES_CACHE_DIR
required_variables VIRES_WPS_SERVICE_NAME VIRES_WPS_URL_PATH
required_variables VIRES_WPS_TEMP_DIR VIRES_WPS_PERM_DIR VIRES_WPS_TASK_DIR
required_variables VIRES_WPS_SOCKET VIRES_WPS_NPROC VIRES_WPS_MAX_JOBS
required_variables VIRES_UPLOAD_DIR

set_instance_variables

#required_variables HOSTNAME
required_variables INSTANCE INSTROOT
required_variables FIXTURES_DIR STATIC_DIR
required_variables SETTINGS WSGI_FILE URLS WSGI MNGCMD EOXSCONF
required_variables STATIC_URL_PATH OWS_URL
required_variables EOXSLOG ACCESSLOG
required_variables EOXSMAXSIZE EOXSMAXPAGE
required_variables OAUTH_SERVER_HOST

if [ -z "$DBENGINE" -o -z "$DBNAME" ]
then
    load_db_conf "`dirname $0`/../db_eoxs.conf"
fi
required_variables DBENGINE DBNAME

#-------------------------------------------------------------------------------
# STEP 1: CREATE INSTANCE (if not already present)

info "Creating EOxServer instance '${INSTANCE}' in '$INSTROOT/$INSTANCE' ..."

# check availability of the EOxServer
#HINT: Does python complain that the apparently installed EOxServer
#      package is not available? First check that the 'eoxserver' tree is
#      readable by anyone. (E.g. in case of read protected home directory when
#      the development setup is used.)
python -c 'import eoxserver' || error "EOxServer does not seem to be installed!"

if [ ! -d "$INSTROOT/$INSTANCE" ]
then
    mkdir -p "$INSTROOT/$INSTANCE"
    eoxserver-instance.py "$INSTANCE" "$INSTROOT/$INSTANCE"
fi

#-------------------------------------------------------------------------------
# STEP 2: DJANGO SETTINGS

cat > "$SETTINGS" <<END
# generated by VirES-for-Swarm configuration scrip

from os.path import join, abspath, dirname

DEBUG = False
DEBUG = True

PROJECT_DIR = dirname(abspath(__file__))
PROJECT_URL_PREFIX = ''

MANAGERS = ADMINS = (
)

DATABASES = {
    'default': {
        'ENGINE': '$DBENGINE',
        'NAME': '$DBNAME',
        'USER': '$DBUSER',
        'PASSWORD': '$DBPASSWD',
        'HOST': '$DBHOST',
        'PORT': '$DBPORT',
    }
}

SITE_ID = 1
ALLOWED_HOSTS = ['*', '127.0.0.1', '::1']
USE_X_FORWARDED_HOST = True

LANGUAGE_CODE = 'en-us'
USE_I18N = True
USE_L10N = True

TIME_ZONE = 'UTC'
USE_TZ = True
MEDIA_ROOT = ''
MEDIA_URL = ''

STATIC_ROOT = join(PROJECT_DIR, 'static')
STATIC_URL = '$STATIC_URL_PATH/'

STATICFILES_DIRS = []

STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
]

SECRET_KEY = '$SECRET_KEY'

MIDDLEWARE = [
    'django.middleware.common.CommonMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    #'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    # 'django.middleware.clickjacking.XFrameOptionsMiddleware',
    #'eoxserver.backends.middleware.BackendsCacheMiddleware',
]

ROOT_URLCONF = '$INSTANCE.urls'

# Python dotted path to the WSGI application used by Django's runserver.
WSGI_APPLICATION = '$INSTANCE.wsgi.application'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'APP_DIRS': True,
        'DIRS': [
            join(PROJECT_DIR, 'templates'),
        ],
        'OPTIONS': {
            'debug': DEBUG,
            'context_processors': [
                'django.contrib.auth.context_processors.auth',
            ],
        }
    }
]

INSTALLED_APPS = (
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.messages',
    'django.contrib.gis',
    'django.contrib.staticfiles',
    #'eoxserver.core',
    #'eoxserver.services',
    #'eoxserver.resources.coverages',
    #'eoxserver.backends',
    #'eoxserver.testing',
    #'eoxserver.webclient',
    'vires',
)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False, # Set False to preserve Gunicorn access logging.
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        },
#        'request_filter': {
#            '()': 'django_requestlogging.logging_filters.RequestFilter'
#        },
    },
    'formatters': {
        'default': {
            'format': '%(asctime)s.%(msecs)03d %(name)s %(levelname)s: %(message)s',
            'datefmt': '%Y-%m-%dT%H:%M:%S',
        },
        'access': {
            'format': '%(asctime)s.%(msecs)03d %(remote_addr)s %(username)s %(name)s %(levelname)s: %(message)s',
            'datefmt': '%Y-%m-%dT%H:%M:%S',
        },
    },
    'handlers': {
        'eoxserver_file': {
            'level': 'DEBUG',
            'class': 'logging.handlers.WatchedFileHandler',
            'filename': '${EOXSLOG}',
            'formatter': 'default',
            'filters': [],
        },
#        'access_file': {
#            'level': 'DEBUG',
#            'class': 'logging.handlers.WatchedFileHandler',
#            'filename': '${ACCESSLOG}',
#            'formatter': 'access',
#            'filters': ['request_filter'],
#        },
        'stderr_stream': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'default',
            'filters': [],
        },
    },
    'loggers': {
        'eoxserver': {
            'handlers': ['eoxserver_file'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': False,
        },
#        'access': {
#            'handlers': ['access_file'],
#            'level': 'DEBUG' if DEBUG else 'INFO',
#            'propagate': False,
#        },
        '': {
            'handlers': ['eoxserver_file'],
            'level': 'INFO' if DEBUG else 'WARNING',
            'propagate': False,
        },
    },
}

EOXS_SERVICE_HANDLERS = [
    'vires.ows.wms.getmap_v11.WMS11GetMapHandler',
    'vires.ows.wms.getmap_v13.WMS13GetMapHandler',
    'eoxserver.services.ows.wps.v10.getcapabilities.WPS10GetCapabilitiesHandler',
    'eoxserver.services.ows.wps.v10.describeprocess.WPS10DescribeProcessHandler',
    'eoxserver.services.ows.wps.v10.execute.WPS10ExecuteHandler',
]

EOXS_PROCESSES = [
    'vires.processes.get_time_data.GetTimeDataProcess',
    'vires.processes.get_model_info.GetModelInfo',
    'vires.processes.get_indices.GetIndices',
    'vires.processes.get_orbit_timerange.GetOrbitTimeRange',
    'vires.processes.eval_model.EvalModel',
    'vires.processes.retrieve_field_lines.RetrieveFieldLines',
    'vires.processes.retrieve_bubble_index.RetrieveBubbleIndex',
    'vires.processes.fetch_data.FetchData',
    'vires.processes.fetch_filtered_data.FetchFilteredData',
    #'vires.processes.fetch_filtered_data_async.FetchFilteredDataAsync',
    #'vires.processes.list_jobs.ListJobs',
    #'vires.processes.remove_job.RemoveJob',
]

VIRES_UPLOAD_DIR = "$VIRES_UPLOAD_DIR"
VIRES_CACHE_DIR = "$VIRES_CACHE_DIR"

END

#[ "$CONFIGURE_ALLAUTH" == "YES" ] && cat > "$URLS" <<END
false && cat > "$URLS" <<END
from django.conf.urls import include, url
from django.views.generic import TemplateView
from eoxserver.services.views import ows
from eoxs_allauth.views import wrap_protected_api, wrap_open_api, workspace
from eoxs_allauth.urls import document_urlpatterns
from vires.client_state import parse_client_state
from vires.views import custom_data #, custom_model, client_state

urlpatterns = [
    url(r'^$', workspace(parse_client_state), name="workspace"),
    url(r'^ows$', wrap_protected_api(ows)),
    url(r'^accounts/', include('eoxs_allauth.urls')),
    url(r'^custom_data/(?P<identifier>[0-9a-f-]{36,36})?$', wrap_protected_api(custom_data)),
    #url(r'^custom_model/(?P<identifier>[0-9a-f-]{36,36})?$', wrap_protected_api(custom_model)),
    #url(r'^client_state/(?P<identifier>[0-9a-f-]{36,36})?$', wrap_protected_api(client_state)),
] + document_urlpatterns
END

#[ "$CONFIGURE_ALLAUTH" != "YES" ] && cat > "$URLS" <<END
true && cat > "$URLS" <<END
from django.conf.urls import url
from eoxserver.services.views import ows
from vires.views import custom_data #, custom_model, client_state

urlpatterns = [
    url(r'^ows$', ows),
    url(r'^custom_data/(?P<identifier>[0-9a-f-]{36,36})?$', custom_data),
    #url(r'^custom_model/(?P<identifier>[0-9a-f-]{36,36})?$', custom_model),
    #url(r'^client_state/(?P<identifier>[0-9a-f-]{36,36})?$', client_state),
]
END

ex -V "$EOXSCONF" <<END
/\[services\.owscommon\]
.,/^\[/g/^\s*[^[]/d
.i
http_service_url=/ows?
.
/\[services\.ows\]
.,/^\[/g/^\s*[^[]/d
.i
update_sequence=`date -u +'%Y%m%dT%H%M%SZ'`
onlineresource=https://vires.services
keywords=ESA, Swarm Mission, Magnetic Field
fees=none
access_constraints=none
name=VirES for Swarm
title=VirES for Swarm
abstract=VirES for Swarm
provider_name=EOX IT Services, GmbH
provider_site=https://eox.at
individual_name=
position_name=
phone_voice=
phone_facsimile=
delivery_point=Thurngasse 8/4
city=Wein
administrative_area=Wien
postal_code=1090
country=AT
electronic_mail_address=office@eox.at
hours_of_service=
contact_instructions=
role=Service provider
.
wq
END

#-------------------------------------------------------------------------------
# STEP 4: APACHE WEB SERVER INTEGRATION

info "Mapping EOxServer instance '${INSTANCE}' to URL path '${INSTANCE}' ..."

# locate proper configuration file (see also apache configuration)
{
    locate_apache_conf 80
    locate_apache_conf 443
} | while read CONF
do
    { ex "$CONF" || /bin/true ; } <<END
/EOXS00_BEGIN/,/EOXS00_END/de
/^\s*<\/VirtualHost>/i
    # EOXS00_BEGIN - EOxServer instance - Do not edit or remove this line!

    # EOxServer instance configured by the automatic installation script

    # static content
    Alias "$STATIC_URL_PATH" "$STATIC_DIR"
    <Directory "$STATIC_DIR">
        Options -MultiViews +FollowSymLinks
        Header set Access-Control-Allow-Origin "*"
    </Directory>

    # favicon redirect
    Alias "/favicon.ico" "$INSTSTAT_DIR/other/favicon/favicon.ico"

    <Location "${BASE_URL_PATH:-/}">
        ProxyPass "http://$VIRES_SERVER_HOST${BASE_URL_PATH:-/}"
        #ProxyPassReverse "http://$VIRES_SERVER_HOST${BASE_URL_PATH:-/}"
        #RequestHeader set SCRIPT_NAME "${BASE_URL_PATH:-/}"
    </Location>

    # EOXS00_END - EOxServer instance - Do not edit or remove this line!
.
wq
END
done

#-------------------------------------------------------------------------------
# STEP 5: VIRES CONFIGURATION


#-------------------------------------------------------------------------------
# STEP x: setup logfiles

# touch the logfile and set the right permissions
_create_log_file() {
    [ -d "`dirname "$1"`" ] || mkdir -p "`dirname "$1"`"
    touch "$1"
    chown "$VIRES_USER:$VIRES_GROUP" "$1"
    chmod 0664 "$1"
}
_create_log_file "$EOXSLOG"
_create_log_file "$ACCESSLOG"
_create_log_file "$GUNICORN_ACCESS_LOG"
_create_log_file "$GUNICORN_ERROR_LOG"

#setup logrotate configuration
cat >"/etc/logrotate.d/vires_eoxserver_${INSTANCE}" <<END
$EOXSLOG {
    copytruncate
    weekly
    minsize 1M
    rotate 560
    compress
    missingok
}
$ACCESSLOG {
    copytruncate
    weekly
    minsize 1M
    rotate 560
    compress
    missingok
}
$GUNICORN_ACCESS_LOG {
    copytruncate
    weekly
    minsize 1M
    rotate 560
    compress
}
$GUNICORN_ERROR_LOG {
    copytruncate
    weekly
    minsize 1M
    rotate 560
    compress
}
END

#-------------------------------------------------------------------------------
# STEP 8: CHANGE OWNERSHIP OF THE CONFIGURATION FILES

info "Changing ownership of $INSTROOT/$INSTANCE to $VIRES_INSTALL_USER"
chown -R "$VIRES_INSTALL_USER:$VIRES_INSTALL_GROUP" "$INSTROOT/$INSTANCE"

#-------------------------------------------------------------------------------
# STEP 9: DJANGO INITIALISATION
info "Initializing EOxServer instance '${INSTANCE}' ..."

# collect static files
python "$MNGCMD" collectstatic -l --noinput

# setup new database
python "$MNGCMD" migrate --noinput

#-------------------------------------------------------------------------------
# STEP 10: GUNICORN SETUP

echo "/etc/systemd/system/${VIRES_SERVICE_NAME}.service"
cat > "/etc/systemd/system/${VIRES_SERVICE_NAME}.service" <<END
[Unit]
Description=VirES EOxServer instance
After=network.target
Before=httpd.service

[Service]
PIDFile=/run/${VIRES_SERVICE_NAME}.pid
Type=simple
WorkingDirectory=$INSTROOT/$INSTANCE
ExecStart=${EOXS_VENV_ROOT}/bin/gunicorn \\
    --preload \\
    --name ${VIRES_SERVICE_NAME} \\
    --user $VIRES_USER \\
    --group $VIRES_GROUP \\
    --workers $VIRES_SERVER_NPROC \\
    --threads $VIRES_SERVER_NTHREAD \\
    --pid /run/${VIRES_SERVICE_NAME}.pid \\
    --access-logfile $GUNICORN_ACCESS_LOG \\
    --error-logfile $GUNICORN_ERROR_LOG \\
    --capture-output \\
    --bind "$VIRES_SERVER_HOST" \\
    --chdir $INSTROOT/$INSTANCE \\
    ${INSTANCE}.wsgi
ExecReload=/bin/kill -s HUP \$MAINPID
ExecStop=/bin/kill -s TERM \$MAINPID
PrivateTmp=true

[Install]
WantedBy=multi-user.target
END

systemctl daemon-reload
systemctl enable "${VIRES_SERVICE_NAME}.service"
